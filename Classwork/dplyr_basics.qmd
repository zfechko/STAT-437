---
title: "dplyr basics"
date: today
format:
    html:
        highlight-style: github
        monofont: "Fira Code"
        code-overflow: wrap
        toc: true
---

```{r setup, message=FALSE, filename="imports"}
library(dplyr)
library(ggplot2)
library(tidyverse)
library(nycflights13)
```

```{r}
head(flights) #nycflights13::flights
```

# Row operations
## `filter`

`filter (filter{dplyr})` selects rows for which some specified conditions are true. Its syntax is:  
```r
filter(data, ...)
```
Where `data` is the name of a data frame or "tibble", and `...` are conditions that must be met for the row to be selected.

**Example:** select rows from `flights`, for which year is 2013, month is either 11 or 12, and tailnum is N14228

```{r}
filter(flights, year == 2013, month %in% c(11, 12), tailnum == "N14228")
```

Example: select rows from `flights`, for which `arr_delay` is $\leq 120$ and `dep_delay` is $\leq 120$

```{r}
#uses logic for the conditions, not greater than 120
filter(flights, !(arr_delay > 120 | dep_delay > 120))
```

You could also use `<=` like so
```r
filter(flights, arr_delay <= 120, dep_delay <= 120)
```

## `arrange`

`arrange` orders the rows of a data frame according to some criteria. Its syntax is  

```r
arrange(data, ...)
```

where `data` is the name of a data frame or tibble and `...` are other conditions

**Example:** order the rows of `flights` by year number, month number, and day number

```{r}
#unique(flights$year)
arrange(flights, year, month, day)
```

# Column operations
## `select`

`select` keeps columns whose names are specified. Its syntax is:  

```r
select(data, ...)
```

**Example:** keep columns of flights with column names year up till day

```{r}
select(flights, year:day)
```

:::{.callout-warning}
## Heads up
The latest version of dplyr might actually drop variables instead of just showing the variables that meet the condition when using the `select` function.
:::

**Example:** select from `flights` all columns except those from year to day (inclusive)

```{r}
select(flights, -(year:day))
```

## `mutate`
`mutate` adds new columns at the end of a dataset, and these new columns are often functions of existing columns

```r
mutate(data, ...)
```

Where `data` is a data frame or tibble, and `...` contains the name of the new column and how it is obtained from some existing columns

**Example:** create a smaller data frame `flights_sml` from `flights` by selecting some of its columns

```{r}
flights_sml <- select(flights, year:day, ends_with("delay"), distance, air_time)
head(flights_sml)
```

then add the following columns:  

- `gain` as the difference between `arr_delay` and `dep_delay`
- `speed` as the ratio of `distance` to `air_time` then multiplied by 60

```{r}
newA <- mutate(flights_sml, gain = arr_delay - dep_delay, speed = distance / air_time * 60)

#display the last 3 columns to show the new columns
newA[1:3, (ncol(newA)-3):ncol(newA)]
```

# Obtaining summaries

## Pipe Operator `%>%`
The pipe operator `%>%` forwards a value or the result of an expression, into the next function call/expression. Its syntax is 

```r
value %>% function
```

where `value` is the value or result of an expression, and `function` is the function to be applied to `value`

**Example:** create a data frame `flights_sml` from `flights` by selecting some of its rows

```{r}
#applying the select function to the flights tibble
flights_sml <- flights %>% select(year:day)
head(flights_sml)
```

```{r}
#applying the filter function to the flights tibble
flights_sml <- flights %>% filter(year == 2013)
head(flights_sml)
```

## `summarise`
`summarise` is typically used on grouped data created by `group_by()`. The output will have one row for each group. Its syntax is 

```r
summarise(data, ...)
```
    
where `data` is a data frame or tibble, and `...` contains summary functions such as mean or sd

**Example:** obtain mean `arr_delay` by `month` and `carrier` for 2 months and 3 carriers

```{r}
tmp <- flights %>% select(month, arr_delay, carrier) %>% filter(month %in% c(1, 2), carrier %in% c("AA", "UA", "US"))

#remove rows that have na
tmp <- na.omit(tmp)

#obtain mean by each combination of month and carrier
sm <- tmp %>% group_by(month, carrier) %>% summarise(mean_arr_delay = mean(arr_delay))

#display the result
head(sm)
```

:::{.callout-warning}
## Caution
Do not load `plyr` after `dplyr`; otherwise `summarise` will be masked and does not work together with `group_by`

To be safe, we can explicitly tell R which package a command belongs to when using it, such as `dplyr::group_by`
:::
