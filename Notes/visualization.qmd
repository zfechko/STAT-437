---
title: "visualization notes"
date: today
format:
    html:
        highlight-style: github
        monofont: "Fira Code"
        code-overflow: wrap
        toc: true
        theme: 
            light: flatly
            dark: darkly
---

# Why visualization?
Data visualization  

- provides preliminary understanding of the data
- helps present and disseminate knowledge
- is a relatively under-developed subject of high-dimensional data science

Different features of data and differnt focuses of visualization require different visualization softwares

# Two visualization paradigms

- **Static visualization:** a snapshot of a dataset (non-interactive)
- **Dynamic:** a sequence of snapshots of a dataset, or a snapshot of a dataset that a user can interact with (like using the shiny package in R)

## Static visualization
There are several R packages to produce static visualizations.  

- `ggplot2` is a popularized package for static visualization. This is the library that we will be using this semester.
- R command `plot` is a basic function for static visualization
- `igraph` creates graphs (as representations of network data such as friendship networks)
  - works like python's `networkx` package
- `ggdendro` creates dendrograms and tree diagrams for clustering tasks
- `ggmpap` visualizes data frames over maps (e.g. crime data over a map of the US)

```{r}
#| code-fold: true
library(ggplot2)
#create a random scatter plot
set.seed(123)
df <- data.frame(x = rnorm(100), y = rnorm(100))

ggplot(df, aes(x, y)) + geom_point()
```

## Dynamic visualization
There are also R packages for dynamic data visualizations

- `plotly` which visualizes data frames dynamically
- `gganimate` which visualizes data frame dynamically.

These packages and those mentioned in the previous slide are somehow connected with and based on `ggplot2`.

The below plot is created using `plotly`

```{r, message=FALSE}
#| code-fold: true
library(plotly)
library(gapminder)

p <- gapminder %>%
  filter(year==1977) %>%
  ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) +
  geom_point() +
  theme_bw()

ggplotly(p)
```

# ggplot2

The elements involved in a ggplot2 plot are:

- data, aesthetic mappings, geometric objects
- statistical transformations
- scales, coordinate system
- facets

These elements will be integrated via ggplot2 grammar  
In short:  

- a plot maps data to visual elements via specific grammar
- ggplot2 builds a plot layer by layer

## On some terms
- aesthetic mappings describe how variables in data are mapped to aesthetic attributes we can perceiv

## An illustration on `ggplot2`

The `mpg` data frame comes with `ggplot2` and will be used to illustrate the grammar of graphics.

```{r}
head(mpg)
```

Plot `displ` vs `hwy` with `geom_point()`.

```{r}
p1 <- ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy))
p1
```

- `p1` is the handle for the plot
- the geometric object `geom_point()` is "point", which results in a scatter plot
- the aesthetic mapping `mapping = aes` maps `displ` and `hwy` to `x` and `y` respectively

```{r}
ggplot(mpg) + 
  geom_line(mapping = aes(x = displ, y = hwy))
```

- Here we use `geom_line` which results in a line plot

### A graphic template

The basic structure of a ggplot2 command is:  
```r
ggplot(data = <DATA>) +
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```

## Elementary Visualization
Using the `mpg` dataset we will illustrate several instances of elementary visualization.  

- scatter plot
- density plot, histogram
- box plot
- bar plot, pie chart

For this section we're only going to focus on a few variables in the `mpg` dataset.  

```{r}
mptmp <- mpg %>% select(displ, hwy, drv, class)
head(mptmp)
```

Convert character variables in `mpg` into factors by using `dplyr::mutate_if()`
  
```{r}
mpg = mpg %>% dplyr::mutate_if(is.character, as.factor)
class(mpg$class)
```

### Scatter plot

```{r}
p1
```

#### color
```{r label="color"}
#| code-fold: true
#plot displ vs hwy where each class is a different color
p1a <- ggplot(mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
p1a
```

#### shape
```{r label="shape"}
#| code-fold: true
#plot displ vs hwy where each class is a different shape
p1b <- ggplot(mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))
p1b
```

since there are more than 6 class levels but shape values are not manually provided. Namely, unless otherwise specified, only 6 default shapes are used

this can be resolved like so
  
```{r label="shape2"}
p1b <- ggplot(mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, shape = class)) +
  scale_shape_manual(values = 1:length(unique(mpg$class)))

p1b
```

#### Adding axis labels and title

```{r label="axis labels"}
#| code-fold: true
p1b + xlab("Engine Displacement") + ylab("Highway MPG") +
  ggtitle("Efficiency") + theme(plot.title = element_text(hjust = 0.5))
```

:::{.callout-note}
Axis labels and title should all be characters or strings.

The command `theme(plot.title = element_text(hjust = 0.5))` centers the title.
:::

### Density Plot

Density plots can be used to:  

- visually check model assumptions (such as if random errors are Gaussian)
- visually compare a response's behavior under different conditions (such as sales amounts in different seasons)

```{r label="density"}
#| code-fold: true
#plot the density of hwy for compact, suv, and 2seater cars
mpg1 <- mpg %>% filter(class %in% c("compact", "suv", "2seater"))

p2 <- ggplot(mpg1, aes(x = hwy, color = class, fill = class)) +
  geom_density(linetype = "dashed", alpha = 0.5) + 
  theme_bw()
p2
```

### Histogram

Create a histogram for `hwy` of 3 classes of cars (using mpg1 from the density plot)

```{r label="histogram"}
#| code-fold: true
p2c <- ggplot(mpg1, aes(x = hwy, fill = class)) +
  geom_histogram(bins = 20, position = "dodge") +
  theme_bw()
p2c
```

### Box plot

Boxplot, also referred to as the box-and-whisker plot, does not present full distributional information as a density plot. But it can be used to visually check:  

- the median of the data; the skewness
- outliers in the data

```{r label="boxplot"}
#| code-fold: true
p3 <- ggplot(mpg1, aes(x = class, y = hwy)) +
  geom_boxplot() +
  theme_bw() +
  stat_summary(fun.y = mean, geom = "point", shape = 18, size = 3)
ggplotly(p3)
```

### Bar plot

A bar plot represents a quantity of interest via the height of a bar.  

```{r label="barplot"}
#| code-fold: true
p4 <- ggplot(mpg1) + 
  geom_bar(aes(x = class, y = hwy, fill = drv), stat = "identity", position = "dodge") +
  theme_bw()

p4
```

:::{.callout-note} 
Notice how `2seater` only has one bar. This is because in the dataset, `2seater` cars only have `r` drive.
:::

```{r label="2seater note"}
mpg0 <- mpg1 %>% filter(class == "2seater")
unique(mpg0$drv)
```

### Pie chart

```{r label="piechart setup"}
#| code-fold: true
#| code-summary: "piechart setup"
library(scales) #this library helps scale data
mpg2 <- mpg1 %>% group_by(class) %>%
  dplyr::count() %>% ungroup() %>%
  mutate(percentage= `n` / sum(`n`)) %>%
  dplyr::arrange(desc(class))

mpg2$labels <- scales::percent(mpg2$percentage)

mpg2
```

```{r label="piechart"}
#| code-fold: true
pie <- ggplot(mpg2) +
  geom_bar(aes(x = "", y = percentage, fill = class), width = 1, stat = "identity") +
  coord_polar("y", start = 0) +
  theme_void() +
  geom_text(aes(x = 1, y = cumsum(percentage) - percentage / 2, label = labels))

# geom_text adds text as labels to a plot
# cumsum() computes the cumulative 'percentage'
# "Labels" are used to label the proportions

pie
```

- `coord_polar()` is used to create a polar coordinate system, turning the bar plot into a pie chart
- `theme_void()` removes the background and axes
- `geom_text()` adds text as labels to a plot

# Advanced ggplot2

## Faceting

- A dataset can be split into subsets based on some criteria. For example, the mileage dataset `mpg` can be split into subsets based on `class` and `drv` (drive)

### Two types of faceting

Two types of faceting are provided by `ggplot2`:

- `facet_grid()` produces a 2d grid of panels defined by variables which form the rows and columns
- `factet_wrap()` produces a 1d ribbon of panels that is wrapped into 2d

### `facet_wrap()`

Basic syntax: 

```r
facet_wrap(facets, nrow = NULL, ncol = NULL, scales = "fixed", labeller = label_both, shrink = TRUE)
```

- the `facets` can be specified by `~variable` or `vars(variable)`
- `nrow` and `ncol` specify the number of rows and columns of the facetted plot

#### Illustration
Plot `displ` vs `hwy` for each level of `class` via faceting with rowwise layout

```{r}
#| code-fold: true
p1 <- ggplot(mpg) +
  geom_point(mapping = aes(x = displ, y = hwy))

# add faceting using class
p2 <- p1 + facet_wrap(~class, nrow = 2)

p2
```

```r
p1 + facet_wrap(vars(class), nrow = 2)
```

is the same as 

```r
p1 + facet_wrap(~class, nrow = 2)
```

to use a columnwise layout, use `ncol` instead of `nrow`


Plot `displ` vs `hwy`, faceting via `cyl` and `drive`

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  facet_wrap(cyl ~ drv)
```

### `facet_grid()`

`facet_grid` forms a matrix of panels defined by row and column faceting variables, it's basic syntax is:

```r
facet_grid(rows = NULL, cols = NULL, scales = "fixed", labeller = "label_value")
```

#### Using `facet_grid()` with 2 variables
```{r}
p1 + facet_grid(. ~ drv)

p1 + facet_grid(drv ~ .)

p1 + facet_grid(drv ~ cyl)
```

#### Using `facet_grid()` with $\geq$ 3 variables

Plot `displ` vs `hwy` faceting with `drv` and `cyl`, coloring by `class`, assigning shapes by `manufacturer`

```{r}
#| code-fold: true
mpg1 <- mpg %>% filter(manufacturer %in% c("chevrolet", "toyota"))

ggplot(mpg1, aes(x = displ, y = hwy, color = class, shape = manufacturer)) +
  geom_point() +
  facet_grid(drv ~ cyl)
```

# Annotating a Plot

## Two commands for annotation
- `geom_text` adds text directly to a plot
- `geom_label` draws a rectangle around text

Basic syntax:
```r
geom_text(mapping = NULL, data = NULL, parse = FALSE, inherit.aes = TRUE)

geom_label(mapping = NULL, data = NULL, parse = FALSE, inherit.aes = TRUE)
```

## `geom_label()`

plot `displ` vs `hwy` and annotate each pair of observations from (displ, hwy) by `cyl` type

```{r}
#| code-fold: true
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_label(aes(label = cyl), nudge_x = 0.05)
```

```{r}
#| code-fold: true
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_label(aes(label = cyl, color = class), nudge_x = 0.05)
```

## `geom_text()`

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_text(aes(label = cyl), nudge_x = 0.05)
```
